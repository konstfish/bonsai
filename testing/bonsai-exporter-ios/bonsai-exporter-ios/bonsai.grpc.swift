//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: bonsai.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// The greeting service definition.
///
/// Usage: instantiate `Bonsai_BonsaiServiceClient`, then call methods of this protocol to make API calls.
internal protocol Bonsai_BonsaiServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bonsai_BonsaiServiceClientInterceptorFactoryProtocol? { get }

  func registerClient(
    _ request: Bonsai_RegistrationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bonsai_RegistrationRequest, Bonsai_RegistrationConfirmation>

  func pushMetrics(
    _ request: Bonsai_MetricsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bonsai_MetricsRequest, Bonsai_MetricsConfirmation>
}

extension Bonsai_BonsaiServiceClientProtocol {
  internal var serviceName: String {
    return "bonsai.BonsaiService"
  }

  /// Sends a greeting
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterClient.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerClient(
    _ request: Bonsai_RegistrationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bonsai_RegistrationRequest, Bonsai_RegistrationConfirmation> {
    return self.makeUnaryCall(
      path: Bonsai_BonsaiServiceClientMetadata.Methods.registerClient.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterClientInterceptors() ?? []
    )
  }

  /// Unary call to PushMetrics
  ///
  /// - Parameters:
  ///   - request: Request to send to PushMetrics.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pushMetrics(
    _ request: Bonsai_MetricsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bonsai_MetricsRequest, Bonsai_MetricsConfirmation> {
    return self.makeUnaryCall(
      path: Bonsai_BonsaiServiceClientMetadata.Methods.pushMetrics.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePushMetricsInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Bonsai_BonsaiServiceClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Bonsai_BonsaiServiceNIOClient")
internal final class Bonsai_BonsaiServiceClient: Bonsai_BonsaiServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Bonsai_BonsaiServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Bonsai_BonsaiServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the bonsai.BonsaiService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bonsai_BonsaiServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Bonsai_BonsaiServiceNIOClient: Bonsai_BonsaiServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Bonsai_BonsaiServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the bonsai.BonsaiService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bonsai_BonsaiServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// The greeting service definition.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Bonsai_BonsaiServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Bonsai_BonsaiServiceClientInterceptorFactoryProtocol? { get }

  func makeRegisterClientCall(
    _ request: Bonsai_RegistrationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bonsai_RegistrationRequest, Bonsai_RegistrationConfirmation>

  func makePushMetricsCall(
    _ request: Bonsai_MetricsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bonsai_MetricsRequest, Bonsai_MetricsConfirmation>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Bonsai_BonsaiServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Bonsai_BonsaiServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Bonsai_BonsaiServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeRegisterClientCall(
    _ request: Bonsai_RegistrationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bonsai_RegistrationRequest, Bonsai_RegistrationConfirmation> {
    return self.makeAsyncUnaryCall(
      path: Bonsai_BonsaiServiceClientMetadata.Methods.registerClient.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterClientInterceptors() ?? []
    )
  }

  internal func makePushMetricsCall(
    _ request: Bonsai_MetricsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bonsai_MetricsRequest, Bonsai_MetricsConfirmation> {
    return self.makeAsyncUnaryCall(
      path: Bonsai_BonsaiServiceClientMetadata.Methods.pushMetrics.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePushMetricsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Bonsai_BonsaiServiceAsyncClientProtocol {
  internal func registerClient(
    _ request: Bonsai_RegistrationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Bonsai_RegistrationConfirmation {
    return try await self.performAsyncUnaryCall(
      path: Bonsai_BonsaiServiceClientMetadata.Methods.registerClient.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterClientInterceptors() ?? []
    )
  }

  internal func pushMetrics(
    _ request: Bonsai_MetricsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Bonsai_MetricsConfirmation {
    return try await self.performAsyncUnaryCall(
      path: Bonsai_BonsaiServiceClientMetadata.Methods.pushMetrics.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePushMetricsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Bonsai_BonsaiServiceAsyncClient: Bonsai_BonsaiServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Bonsai_BonsaiServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bonsai_BonsaiServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

internal protocol Bonsai_BonsaiServiceClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'registerClient'.
  func makeRegisterClientInterceptors() -> [ClientInterceptor<Bonsai_RegistrationRequest, Bonsai_RegistrationConfirmation>]

  /// - Returns: Interceptors to use when invoking 'pushMetrics'.
  func makePushMetricsInterceptors() -> [ClientInterceptor<Bonsai_MetricsRequest, Bonsai_MetricsConfirmation>]
}

internal enum Bonsai_BonsaiServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "BonsaiService",
    fullName: "bonsai.BonsaiService",
    methods: [
      Bonsai_BonsaiServiceClientMetadata.Methods.registerClient,
      Bonsai_BonsaiServiceClientMetadata.Methods.pushMetrics,
    ]
  )

  internal enum Methods {
    internal static let registerClient = GRPCMethodDescriptor(
      name: "RegisterClient",
      path: "/bonsai.BonsaiService/RegisterClient",
      type: GRPCCallType.unary
    )

    internal static let pushMetrics = GRPCMethodDescriptor(
      name: "PushMetrics",
      path: "/bonsai.BonsaiService/PushMetrics",
      type: GRPCCallType.unary
    )
  }
}

